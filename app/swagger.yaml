openapi: 3.0.0
info:
  title: Flask JWT API with MongoDB and Redis
  description: A scalable Flask API with JWT authentication, MongoDB, Redis, and Swagger
    documentation
  version: 1.0.0
  contact:
    email: support@api.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
- url: '{protocol}://{host}{basePath}'
  description: Dynamic server configuration
  variables:
    protocol:
      default: http
      enum:
      - http
      - https
    host:
      default: localhost:5000
    basePath:
      default: /api/v1
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Enter: Bearer <JWT token>'
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: user1
          minLength: 3
          maxLength: 50
        password:
          type: string
          example: pass123
          minLength: 6
          format: password
        role:
          type: string
          example: user
          enum:
          - user
          - admin
          default: user
      required:
      - username
      - password
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: user1
        password:
          type: string
          example: pass123
      required:
      - username
      - password
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          nullable: true
      required:
      - access_token
    ProtectedResponse:
      type: object
      properties:
        user:
          type: string
          example: user1
        role:
          type: string
          example: user
        message:
          type: string
          example: Access granted to protected resource
      required:
      - user
      - role
      - message
    AdminResponse:
      type: object
      properties:
        message:
          type: string
          example: Admin access granted
      required:
      - message
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: An error occurred
        message:
          type: string
          example: Detailed error message
      required:
      - error
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account with the specified credentials and role
      tags:
      - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid input or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns access and refresh tokens
      tags:
      - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh:
    post:
      summary: Refresh access token
      description: Generates a new access token using a valid refresh token
      tags:
      - Authentication
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Token successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /protected/resource:
    get:
      summary: Access protected resource
      description: Retrieves a protected resource available to authenticated users
      tags:
      - Protected
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Access granted to protected resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtectedResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /protected/admin:
    get:
      summary: Access admin-only resource
      description: Retrieves a resource only available to users with admin role
      tags:
      - Protected
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Admin access granted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
